using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// 작성자 : 조영민
/// 최초작성일 : 2022/04/10
/// 최종수정일 : 
/// 설명 : 
/// 
/// 파괴가능한 맵타일 클래스.
/// 체력이 깎일때마다 이펙트를 생성하며
/// 체력이 0이되면 목록에서 랜덤한 아이템을 드롭하고 파괴됨.
/// </summary>

public class MapTile_Destroyable : MapTile
{
    private int _hp;
    public int hp
    {
        set
        {
            _hp = value;
            for (int i = 0; i < sprites.Length; i++)
            {
                if ((float)_hp / hpMax > (float) i / (sprites.Length))
                {
                    spriteRenderer.sprite = sprites[i];
                    break;
                }
            }

            if(_hp > 0)
            {
                if (hurtEffect != null)
                Instantiate(hurtEffect, transform.position, Quaternion.identity);
            }   
            else
            {
                DropRandomItem();
                if (destroyEffect != null)
                    Instantiate(destroyEffect, transform.position, Quaternion.identity);
                gameObject.SetActive(false);
                ReturnToPool();
            }
        }
        get
        {
            return _hp;
        }
    }

    [SerializeField] int hpMax;
    [Header("데미지 감소에 따른 순서대로 Sprite를 추가하세요.")]
    [SerializeField] private Sprite[] sprites;

    [Header("피격/파괴시 이펙트가 필요한 경우 개발자에게 문의바랍니다")]
    [SerializeField] private GameObject hurtEffect;
    [SerializeField] private GameObject destroyEffect;

    [SerializeField]
    class DropItemInfo
    {
        public GameObject itemPrefab;
        public float dropRatio; // 0~100;
    }
    [SerializeField] private List<DropItemInfo> dropItems;


    private SpriteRenderer spriteRenderer;

    public override void Awake()
    {
        base.Awake();
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    public override void OnEnable()
    {
        base.OnEnable();
        hp = hpMax;
        if(sprites.Length > 0)
            spriteRenderer.sprite = sprites[0];
    }

    private void DropRandomItem()
    {
        foreach (var item in dropItems)
        {
            float rand = Random.Range(0f, 100.0f);
            if (rand < item.dropRatio)
            {
                Instantiate(item.itemPrefab, transform.position, Quaternion.identity);
                break;
            }
        }
    }
}
